from multiprocessing import Process
import http.server
from typing import List
from urllib.parse import urlparse
from urllib.parse import parse_qs
from json import dumps
from src.services.console import Console


class StatsProvider:
    def __init__(self, name: str):
        self.name = name

    def getStats():
        pass

class MyHttpRequestHandler(http.server.SimpleHTTPRequestHandler):
    statsProviders: List[StatsProvider] = None 
    def do_GET(self):

        # Extract query param
        key = '6253a4f08f16ad236dd5cb8f7aaba35f'
        query_components = parse_qs(urlparse(self.path).query)
        if 'k' in query_components:
            if query_components["k"][0] != key:
                return    

        # Sending an '200 OK' response
        self.send_response(200)

        # Setting the header
        self.send_header("Content-type", "application/json")

        # Whenever using 'send_header', you also have to call 'end_headers'
        self.end_headers()

        result = {}
        for s in MyHttpRequestHandler.statsProviders:
            result[s.name] = s.getStats()

        json = dumps(result, indent=4)

        # Some custom HTML code, possibly generated by another function
        #html = f"<html><head></head><body><h1>Hello {name}!</h1></body></html>"

        # Writing the HTML contents with UTF-8
        self.wfile.write(bytes(json, "utf8"))

        return

def runner(console: Console, statsProviders: List[StatsProvider]):

    # Create an object of the above class
    handler_object = MyHttpRequestHandler
    handler_object.statsProviders = statsProviders
    PORT = 5421
    try:
        #my_server = socketserver.TCPServer(("", PORT), handler_object)
        server = http.server.ThreadingHTTPServer(("", PORT), handler_object)
        
        # Star the server
        server.serve_forever()
    except:
        console.exception()



class HttpStatsServer:
    def __init__(self, console: Console, statsProviders: List[StatsProvider]):
        self.console = console
        self.statsProviders = statsProviders
        self.process = None

    def start(self):
        self.process = Process(target=runner, args=(self.console, self.statsProviders))
        self.process.start()
    
    def stop(self):
        self.process.kill()
        self.process.join()
    
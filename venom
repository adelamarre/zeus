#!/usr/bin/python3
import argparse
import importlib
import os
import signal
from src.application.scenario import AbstractScenario
import sys
from getpass import getuser
from multiprocessing import Event
from re import T

import urllib3
from colorama import Fore

from src import VERSION
from src.application.constants import APPLICATIONS
from src.services.console import Console
from src.services.questions import Question
from src.services.terminal import Terminal
from colorama import Fore, Style
urllib3.disable_warnings()


if __name__ == '__main__':
    if getattr(sys, 'frozen', False):
    # If the application is run as a bundle, the PyInstaller bootloader
    # extends the sys module by a flag frozen=True and sets the app 
    # path into variable _MEIPASS'.
        APP_PATH = sys._MEIPASS
    else:
        APP_PATH = os.path.dirname(os.path.abspath(__file__))


    parser = argparse.ArgumentParser()
    parser.add_argument('--noinfo', help="Do not show statistics info in the terminal", action="store_true", default=False)
    parser.add_argument('--verbose', help="Print out log messages", action="store_true", default=False)
    parser.add_argument('--screenshot', help="Create a screenshot when excetpion is thrown", action="store_true", default=False)
    parser.add_argument('--debug', help="Set the log path to the app dir", action="store_true", default=False)
    parser.add_argument('--nolog', help="Do not write anything on hard drive", action="store_true", default=False)
    parser.add_argument('-s', '--scenario', help="Define a scenario to start (<app_name>.<scenario>)", default=None, type=str)
    parser.add_argument('--dryrun', help="If set, the scenario start in dry mode", action="store_true", default=False)
    group = parser.add_mutually_exclusive_group()
    group.add_argument('--headless', help="Start webdriver in headless mode", action="store_true", default=False)
    group.add_argument('--vnc', help="Start VNC for each driver (not in headless mode)", action="store_true", default=False)
    
    
    args = parser.parse_args()
    
    if not args.scenario:
        terminal = Terminal('-')
        terminal.clear()
        terminal.appendHeader(VERSION, Fore.RED)

        if args.dryrun or args.debug:
            terminal.appendSeparator()
            terminal.append('%s %s' % (
                ((Fore.WHITE + 'Debug: ' + Fore.BLUE + 'True    ' + Fore.RESET)  if args.debug else ''),
                ((Fore.WHITE + 'Dry run: ' + Fore.BLUE + 'True    ' + Fore.RESET)  if args.dryrun else ''),
            ))
            terminal.appendSeparator()
            terminal.append()
        terminal.flush()

    if args.debug:
        userDir = APP_PATH + '/temp'
        os.makedirs(userDir, exist_ok=True)
    else:
        userDir = '/home/%s/.venom' % getuser()

    
    shutdownEvent = Event()
    
    

    def signalHandler(signum, frame):
        shutdownEvent.set()

    signal.signal(signal.SIGINT, signalHandler)
    signal.signal(signal.SIGTERM, signalHandler)

    if args.scenario:
        try:
            [app, scenario] = args.scenario.split('.')
        except:
            sys.exit('Bad screnario format <application>.<scenario>')
        
        try:
            scenarioLib = scenarioLib = importlib.import_module('src.application.%s.scenario.%s' % (app, scenario))   
        except Exception as e:
            print(e)
            sys.exit('Unknown application or scenario : %s' % args.scenario)
    else:
        ScenarioClass = None
        scenarioLib = None
        console = Console(verbose=3, logToFile=False)
        app = Question().choice('Select the application :',APPLICATIONS)
        if app:
            if APPLICATIONS[app].get('disabled', False):
                console.warning('Sorry this application is not yet implemented.')
            else:    
                scenario = Question().choice('Select the scenario    :', APPLICATIONS[app]['scenary'])
                if scenario:
                    scenarioLib = importlib.import_module('src.application.%s.scenario.%s' % (app, scenario))
    
    if scenarioLib:
        try:
            scenarioClass: AbstractScenario = scenarioLib.Scenario(args=args, userDir=userDir, shutdownEvent=shutdownEvent)
            scenarioClass.start()
        except Exception as e:
            print(e)
